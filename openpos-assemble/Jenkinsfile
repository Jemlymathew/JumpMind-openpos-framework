pipeline {
    agent { label 'commerce' }
    environment {
        MAVEN_JM_PW = credentials('mavenJumpMindPassword')
    }
    stages {
        stage('Clean') {
            steps {
                echo 'gitBranch=${BRANCH_NAME}'
                dir('openpos-assemble') {sh """./gradlew \
                  -PdownloadNode=true \
                   clean"""}
            }
        }
        stage('Build & Test') {
            steps {
                echo 'gitBranch=${BRANCH_NAME}'
                dir('openpos-assemble') {sh """./gradlew \
                  -PdownloadNode=true \
                  -PignoreFailures=true \
                  -PbuildNumber=${BUILD_NUMBER} \
                  -PbuildName="${JOB_NAME}" \
                  -PgitBranch="${BRANCH_NAME}" \
                  -PgitHash=${GIT_COMMIT} \
                   build"""}
            }
        }
        stage('Sonar Analysis - Branch') {
            when { branch pattern: "master|releases.*", comparator: "REGEXP"}
            steps {
                withSonarQubeEnv('JumpMindCloud') {
                    dir('openpos-assemble') { sh """./gradlew \
                      -Dsonar.branch.name="${BRANCH_NAME}" \
                       sonarqube"""}
                }
            }
        }
        stage('Sonar Analysis - PR') {
            when { branch pattern: "PR-.*", comparator: "REGEXP"}
            steps {
                script {
                    def urlcomponents = env.CHANGE_URL.split("/")
                    env.GITHIB_ORG = urlcomponents[3]
                    env.GITHUB_REPO = urlcomponents[4]
                }
                withSonarQubeEnv('JumpMindCloud') {
                    dir('openpos-assemble') { sh """./gradlew \
                      -Dsonar.pullrequest.provider=GitHub \
                      -Dsonar.pullrequest.github.repository=${GITHIB_ORG}/${GITHUB_REPO} \
                      -Dsonar.pullrequest.key=${env.CHANGE_ID} \
                      -Dsonar.pullrequest.branch=${env.CHANGE_BRANCH} \
                       sonarqube"""}
                }
            }
        }
        stage('Deploy') {
            when { branch pattern: "master|releases.*", comparator: "REGEXP"}
            steps {
                dir('openpos-assemble') {sh """./gradlew \
                  -PdownloadNode=true \
                  -PdeployUser=${MAVEN_JM_USER} \
                  -PdeployPassword=${MAVEN_JM_PW} \
                  -PdeploySftpUrl=${MAVEN_JM_URL} \
                   -x build deploy"""}
            }
        }
    }
    
    post {
        always {
            junit '**/build/reports/**/*.xml'
        }
        success {
            slackSend (color: '#00FF00',
                       tokenCredentialId: 'slackToken',
                       channel: 'jenkins',
                       message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
        failure {
            slackSend (color: '#FF0000',
                       tokenCredentialId: 'slackToken',
                       channel: 'jenkins',
                       message: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
        }
    }
}